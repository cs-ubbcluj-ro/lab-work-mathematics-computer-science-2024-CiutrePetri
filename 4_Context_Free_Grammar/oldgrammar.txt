For a grammar G:{n,Σ,P,@}
We have:
n=[ @, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, A1, B1, C1, D1, E1, F1, G1, H1, I1,cond,z,for]
start->@ 

n:
<Program> = @  
<Statement> = B  
<Declaration> = C 
<Variable-declaration> = D ,
<Type> = E  
<Identifiers> = F 
<Array-declaration> = G 
<Array list> = H 
<Array> = I
<Dimension> = J
<Declarations> = K 
<Assignment> = L
<Array-Element-Assignment> = M
<Expression> = N
<Term> = O 
<Factor> = P
<Operations> = Q 
<IO-Statement> = R
<If-Statement> = S 
<While-Statement> = T
<Composed-condition> = U
<Condition> = V
<Relationals> = W
<Logicals> = X
<Identifier> = Y 
<Characters> = Z
<Character> = A1
<Letter> = B1
<Digit> = C1
<NoZero> = D1
<Constant> = E1
<Numerical> = F1
<Digits> =G1
<Char> = H1
<String> = I1


Σ:
x=[ ' , " , ( , ) , { , } , [ , ]  , , . , = , c, d, l, o, p, r, s,z, else , if , read , write , while,for]
u=[A,B,C,...Z}
l=[a,b,c,..z]
c=[else, if, elseif]
d=[0,1,2,3,4,5,6,7,8,9]
t={numerical,string,char }
o = {&&, || } 
s={ +, - }
p={+ , -, *, /}
r={>, >=, <=, <, =, <>}
z={0}

P:
q=[
A -> B | B ;@ 
B -> C | L| R | S| T
C -> D | G 
D -> EF 
E -> t 
F -> Y | Y , F 
G -> EH 
H -> I | I,H 
I -> @1J 
J -> [D1] | [D1]J 
K -> C | C ; K 
L -> Y = N | M
M -> Y[D1] = N 
N -> O| N Q O
O-> P | O Q P
P -> ( N ) | Y | E1
Q -> s | a
R -> read(Y) | write(Y)
S -> if(U){@} | if(U){@}else{@} 
T -> while(U){@} 
U -> V | !V | !U| V W U
V -> N W N 
W -> r 
Z -> c
Y -> B1 | _B1| _B1 Z
Z -> A1 | A1 Z 
A1 -> B1 | C1 | _ | '  ' 
B1 -> u | l 
C1 -> z | D1 
D1 -> d 
F1 -> C1 | D1 G1 
G1 -> C1 | C1 G1 
H1 -> '_' | ' ' | 'B1' | 'C1' 
I1 -> "Z" 
Z -> A1 | A1 Z
} 


]




<Program> ::= <Statement> | <Statement> ;  <Program> 

<Statement> ::= <Declaration> | <Assignment> | <IO-statement>  | <If-Statement>  | <While-Statement> 

<Declaration> ::= <Variable-declaration> | <Array-declaration> |

<Variable-declaration> ::= <Type> <Identifiers> 

<Type> = <numerical>| <string> |<boolean>|<enclosure>

<Identifiers> :: = <Identifier>| <Identifier> ; <Identifiers> 

<Array declaration> ::= <Type> <Array list> 

<Array list> ::= <Array> | <Array> , <Array list> 

<Array> ::= <Identifier> <Dimension>  

<Dimension> ::= <Natural number>

<Declarations> ::= <Declaration> | <Declaration> ; <Declarations> 

<Assignment> ::= <Identifier> = <Expression>  | <Array-Element-Assignment> 

<Array-Element-Assignment> ::= <Identifier>[<Positive-Integer-Number>] = <Expression> 

<Expression> ::= <Term> | <Expression> <Operator> <Term> 

<Term> ::= <Factor> | <Term> <Operatotions> <Factor> 

<Factor> ::= ( <Expression> ) | <Identifier> | <Constant> 

<Operations> :: = + | - | * | / | // | % 

<Operator>::=<Relationals>|<Logicals>|<> <Operator>
 
<IO-Statement> ::= input(<Identifier>) | output(<Identifier>) 

<If-Statement> ::= if(<Composed-condition>){<Program>} |  if(<Composed-condition>){<Program>}else{<Program>} 

<While-Statement> ::= while(<Composed-condition>){<Program>} 

<Composed-condition> ::= <Condition>|!<Condition> |!<Composed-Condition>| <Condition><Logicals><Composed-Condition> 

<Condition> ::= <Expression> <Relationals> <Expression> 

<Relationals> ::=  < | <= | == | != | >= | > 

<Logicals> ::= and | or

<Identifier> ::= <Letter> | _<Letter> | _<Letter><Characters> 

<Characters> ::= <Character> | <Character><Characters> 

<Character> ::= <Letter> <Letter> | <Digit> | _ |  | 

<Letter> ::= A | B | C | D | E | F |G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z | a | b | c | d | e | f |g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z 

<Digit> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 
 
<NOzero> ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 

<Constant> ::=  <Numerical> | <Char> | <String>|<Boolean>

<Numerical> ::= <Digit> | <<NOzero><Digits> 

<Digits> ::= <Digit> | <Digit><Digits> 

<Char> ::= '_' | '  ' | '<Letter>' |' <Digit>' 

<String> ::= "<Characters>" 